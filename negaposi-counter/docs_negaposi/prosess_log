025・５・２２
## ✅ 青くなる現象の原因と対策まとめ（CSSボタン）

### ❓現象
- ボタンをクリック・タップすると、**テキストや背景が青く光る**
- 特に Safari や Chrome（Mac/iOS）で起こりやすい

---

### 🔍 原因
- ブラウザの**デフォルトスタイル（ユーザーエージェントスタイル）**
  - `button` や `input` などの要素に、フォーカス時の `outline`, `box-shadow`, `color` が自動で適用される
- **`-webkit-focus-ring-color`** や **`appearance` の影響**
  - フォーカスされた時の青い枠や青いテキストなど
- `:active` 状態でブラウザが**角丸（border-radius）を一時的に無視**することがある

---

### ✅ 対策（CSSコピペ用）

```css
.action-btn {
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  border-radius: 12px;
}

.action-btn:focus,
.action-btn:active {
  outline: none;
  box-shadow: none;
  color: inherit;
  border-radius: 12px; /* ← ここにも書くのが重要！ */
}
```

---


# ①ネガポジ感情カウンター

### 目次
1. [プロジェクト概要](#プロジェクト概要)
2. [今後やりたいこと（仕様イメージ）](#今後やりたいこと仕様イメージ)
3. [プロセスログ](#プロセスログ)
4. [使用技術](#使用技術)
5. [学びの記録・気づき](#学びの記録気づき)
6. [今後追加予定の機能](#今後追加予定の機能)

---

## プロジェクト概要

日々のポジティブ／ネガティブ感情をボタン1つで記録し、感情ポイントとして見える化するカウンターアプリです。

- ポジティブな出来事 → +1
- ネガティブな出来事 → -1
- 日々の気持ちのバランスを視覚的にチェック

## 完成動画
- [完成動画](https://youtu.be/c_AaQTy8ph8?si=PUojFZzXRlkZ__cr)

---
## 使用イメージ

- ユーザーがボタンを押すだけで感情を記録できる
- ポジティブとネガティブを見える化したい
- シンプルで日常的に使えるデザインにしたい
- 1日の感情バランスを確認できたらうれしい！

[→ 技術仕様の詳細はこちら（仕様書：spec.md）](practice/5_application/250422_counter//spec.md)

---

## プロセスログ

### プロセス①：2025/04/22-23
#### 今日の学び・気づき
- JavaScriptで初期値を設定する理由
  - エラーを防ぐ、状態の管理
  - スクリプト（JavaScriptコード）の動きを明確にするためため
    - 例　カウンターアプリの場合、スタートが０だと明確に提示
- `addEventListener`の意味と使い方
  - イベントリスナーを追加するメソッド
  - クリックイベントを追加する際に使用した
- 無名関数と名前あり関数(関数宣言)

- documentオブジェクトの使い方
  - 表示されているWebページそのものを指す
- メソッドチェーン（連鎖）について
  - 複数のメソッドを `.` でつなげて一気に書く方法
  - 例： `document.getElementById("plus").addEventListener("click", function() {});`
  - 上記の例の場合.addEventListenerはdocumentに対するものでなく、前のメソッドから連鎖しえボタンに対するメソッドになる
- function updateDisplay() { ... }
  - 画面の表示を更新する
- .textContent
  - ここに文字を入れる

#### プログラミング中のエラーとその解決方法
- プラスとマイナスの数が別々に表示されない
  - plisubtnとminusbtn、数の表示場所の定義付がされていなかった
  - それぞれdocument.getElementByIdで指定したidを探すことで定義
    - 例　カウンターアプリの場合、スタートが０だと明確に提示
- `addEventListener`の意味と使い方
  - イベントリスナーを追加するメソッド
  - クリックイベントを追加する際に使用した
- 初歩的なタイプミス
  - 小文字大文字
  - コピペした際のペーストミス

#### 参考資料
<div style="display: flex; justify-content: space-between; margin-bottom: 20px;">
  <img src="practice/5_application/250422_counter/images2/html.png" width="30%" alt="カウンターアプリのHTML構造">
  <img src="practice/5_application/250422_counter/images2/js.png"width="30%" alt="カウンターアプリのJavaScript実装">
  <img src="practice/5_application/250422_counter/images2/mumei-kannsu.png" width="30%" alt="無名関数と関数宣言の違い">
</div>

### 次のステップ
- CSSの実装
- 仕様書の作成

---
### プロセス③：2025/04/26-27
- CSS実装
- 仕様書の作成
  - ChatGPTにイメージを共有して、テーマとデザインを決めた
#### 前回からのデザイン改善点
- プラスマイナスのボタンを左右逆にした
  - 右利きユーザーが多いことを視野に入れ、プラスボタンを押しやすい構造に
  - UIの基本ルールとしても：右側＝進む・増える・ポジティブ/左側＝戻る・減る・ネガティブ
- ボタンの中にプラマイそれぞれのカウント数を入れた
  - 記号を下、数字を上に配置することで、ボタンを押した時に数字のカウントが見えるようにした
  - ボタンとカウントを一体型にすることでシンプルなデザインになった



#### このプロセスでの学び
- idとクラスの使い分け
  - CSS設定にはクラスを使うと汎用性が高い
  - Javascriptのようにピンポイントで使う時はidが適している
  - idセレクタは詳細度が高すぎて上書きが難しくなる
- idセレクタの使い方
  - 先頭に # （シャープ記号）をつける
  - ページ内で同じIDは1つしか使えない（一意である必要がある）
  - クラスより優先度（詳細度）が高い
  - クラスセレクタのように複数の要素に同じクラスを設定できない
- デザインの垢抜けポイント
  - 余白を意識する
  - 色のトーンを調整する
- :activeの使い方
  - ボタンが押された時などのアクティブ時の設定
  - .action-btn:active　のように使う
- 縦並びプロパティ
　- flex-direction: column;で設定
- デザインの左右上下の配置
　- 上下の並びは「HTMLの順番＋flex-direction」で決まる
　- 左右も同様にHTMLに入力された順で左→右になる

#### プログラミング中のエラーとその解決方法
- ボタン内にカウントを組み入れたがボタンを押すたびに「+」と「-」の記号が消えてしまう
  - updateDisplay()で上書きされていた
  - ボタン内にCountDisplayをidとして設定しカウント表示場所を作った

- ボタン内のプラスマイナスの文字の大きさやデザインが対照でないように見える
  -デフォルトのフォントだと「＋」と「−」の幅が微妙に違うことが原因
- フォントのサイズが変わらない
  - 上位セレクタでフォントを既に設定していた
  - <span class="count-number" id="minusCountDisplay">と指定しており、IDにフォントを設定していたためクラスの内容が適用されていなかった。（IDで指定した）
  - .action-btn .count-number {
     font-size: 30px !important;
   }のように詳細セレクタと重要!important（乱用注意）をつけることで解決策になることもある
#### 気付き
- ボタンを押す快感という視点
  - ボタンアニメーションや、UIの重要性を感じた
  - 太鼓の達人を参考にした
    

#### AIの活用方法とChatGPTとの会話記録（一部抜粋）
- この1ヶ月、AIを使ったプログラミング学習をしていく中で、cursorAIとChatGPT公式では同じgpt-4oを使ってもプロンプトの理解の仕方や機能の実装方法が違うことを感じた。今回は設計整備やデザインの相談はChatGPTのgpt-4oを使って考えた。
- ChatGPT公式は画像生成機能や感覚的なデザイン提案やビジュアル化が得意
- cursorはコードのファイルへの反映や整理が得意、
- 今後どのようにAIを使い分けていくかは今後の課題とする
<div style="display: flex; justify-content: space-between; margin-bottom: 20px;">
  <img src="practice/5_application/250422_counter/images2/gpt1.png" width="30%" alt="ChatGPTとの会話1">
  <img src="practice/5_application/250422_counter/images2/gpt2.png"width="30%" alt="ChatGPTとの会話2">
  <img src="practice/5_application/250422_counter/images2/gpt3.png" width="30%" alt="ChatGPTとの会話3">
</div>


---
## 使用技術

- HTML
- CSS
- JavaScript（DOM操作、イベントリスナーなど）

---


### このプロジェクトの応用制作物

このプロジェクトで制作したデータを元に作成し、テーマとデザインを変えることでよりブラッシュアップした作品になりました。

[カウンターアプリ2の詳細はこちら（仕様書：spec.md）](practice/5_application/250427_counter2/spec.md)




### 制作期間
2025/04/22-2025/04/27